// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  invoices Invoice[]
  earlyaccess EarlyAccess?
  companies Companies[]
  transactions Transactions[]
  tasks Tasks[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Invoice{
  
  id String @id @default(uuid())
  invoiceName String
  total Int
  status InvoiceStatus
  date DateTime
  dueDate Int
  fromName String
  fromEmail String
  fromAddress String
  clientName String
  clientEmail String
  clientAddress String
  currency String
  invoiceNumber Int
  note String?
  invoiceItemDescription String
  invoiceItemQuantity Int
  invoiceItemRate Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User User? @relation(fields: [userId], references: [id])
  userId String?
}

enum InvoiceStatus{
  PAID 
  PENDING
}

model EarlyAccess {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Transactions{
  id        String   @id @default(uuid())
  fromName  String
  clientName String
  transactionNumber Int
  amount    Int
  currency  String
  category String
  transactionDescription String
  accountName String
  date      DateTime
  status    TransactionStatus
  paymentMethod String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  User User? @relation(fields: [userId], references: [id])
  userId String?
}

enum TransactionStatus{
  PENDING
  COMPLETED
  FAILED
}

model Companies{
  id String @id @default(uuid())
  name String @unique
  domainName String @unique
  accountOwner String @unique
  employees Int
  address String
  total Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])
  userId String?
}

model Tasks{
  id String @id @default(uuid())
  title String 
  status TaskStatus
  date DateTime
  dueDate Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])
  userId String?
}

enum TaskStatus{
  Todo
  InProgress
  Done
}