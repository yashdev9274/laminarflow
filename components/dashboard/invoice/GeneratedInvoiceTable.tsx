"use client";

import { Table, TableBody, TableCaption, TableCell, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { SandClockIcon } from "@/components/icons/sandClockIcon";
import { XCircle, CheckIcon } from "lucide-react";
import { formatCurrency } from "@/hooks/formatCurrency";
import GeneratedInvoiceTableAction from "./GeneratedInvoiceTableAction";
import { GeneratedInvoice } from "@/types/invoice"; // Import the shared interface

interface GeneratedInvoiceTableProps {
  invoices: GeneratedInvoice[];
}

const getStatusBadge = (status: string) => {
  switch (status.toLowerCase()) {
    case "pending":
      return (
        <Badge variant="outline" className="gap-1 rounded bg-yellow-100 text-yellow-800 border-yellow-300 px-2 py-1">
          <SandClockIcon size={18} aria-hidden="true" className="text-yellow-600" />
          {status}
        </Badge>
      );
    case "failed":
      return (
        <Badge variant="outline" className="gap-1 rounded bg-red-100 text-red-800 border-red-300 px-2 py-1">
          <XCircle size={18} aria-hidden="true" className="text-red-600" />
          {status}
        </Badge>
      );
    default:
      return (
        <Badge variant="outline" className="gap-1 bg-green-100 text-green-800 border-green-300 px-2 py-1 rounded">
          <CheckIcon className="text-emerald-500" size={18} />
          {status}
        </Badge>
      );
  }
};

export function GeneratedInvoiceTable({ invoices }: GeneratedInvoiceTableProps) {
  return (
    <div className="overflow-x-auto ml-2 min-h-[450px] mt-7">
      <Table className="min-w-full">
        <TableCaption>A list of invoices generated by the AI agent.</TableCaption>
        <TableHeader>
          <TableRow>
            <TableCell className="text-left">Invoice Number</TableCell>
            <TableCell className="text-left">Client Name</TableCell>
            <TableCell className="text-left">Total Amount</TableCell>
            <TableCell className="text-left">Date</TableCell>
            <TableCell className="text-left">Status</TableCell>
            <TableCell className="text-left">Actions</TableCell>
          </TableRow>
        </TableHeader>
        <TableBody>
          {invoices.map((invoice) => (
            <TableRow key={invoice.id}>
              <TableCell className="text-left">{invoice.invoiceNumber}</TableCell>
              <TableCell className="text-left">{invoice.clientName}</TableCell>
              <TableCell className="text-left">{formatCurrency({ amount: invoice.totalAmount, currency: invoice.currency as any })}</TableCell>
              <TableCell className="text-left">{new Intl.DateTimeFormat("en-US", { dateStyle: "long" }).format(new Date(invoice.createdAt))}</TableCell>
              <TableCell className="text-left">
                {getStatusBadge(invoice.status)}
              </TableCell>
              <TableCell className="text-left">
                <GeneratedInvoiceTableAction id={invoice.id} />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
} 